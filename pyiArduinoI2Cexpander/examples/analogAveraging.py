# Данный пример меняет усреднение АЦП при чтении аналоговых данных.
                                        # $ Строки со знаком $ являются необязательными.
from pyiArduinoI2Cexpander import *     #   Подключаем библиотеку для работы с расширителем выводов.
from time import sleep
gpio = pyiArduinoI2Cexpander(0x08)      #   Объявляем объект gpio для работы с функциями модуля pyiArduinoI2Cexpander, указывая адрес модуля на шине I2C.
                                        #   Если объявить объект без указания адреса (pyiArduinoI2Cexpander()), то адрес будет найден автоматически.
gpio.analogAveraging(255)               #   Указываем максимальный коэффициент усреднения показаний АЦП.
gpio.pinMode(4, INPUT, ANALOG)          # $ Конфигурируем вывод 4 на работу в качестве аналогового входа.
                                        #
while True:                             #
  pin4 = gpio.analogRead(4)             #   Читаем аналоговый уровень с вывода №4 в переменную «pin4».
  print("Pin_4="+str(pin4)              #
        + ".\t Для выхода"              #
        " нажмите ctrl+c")              #
  sleep(.1)                             # $ Ждём десятую долю секунды, чтоб не захламлять stdout.
                                        #
#   ПРИМЕЧАНИЕ:                         #
#   Для проверки работы скетча подключите потенциометр к 4 выводу.
#   Коэффициент усреднения АЦП задаётся функцией analogAveraging()
#   которая в качестве аргумента принимает значение от 0 до 255.
#   По умолчанию 127. Усреднение применяется для всех выводов.
#   Чем выше коэффициент усреднения, тем плавнее будут меняться
#   показания считанных аналоговых уровней.
#   Для отключения усреднения укажите значение 0 или 1.
